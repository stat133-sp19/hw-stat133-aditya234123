min <- min(num_chars)
max <- max(num_chars)
for (i in min:max) {
if (i %in% num_chars) {
paste(states[num_chars == i], collapse = ", ")
}
}
min
max
if (i %in% num_chars) {
paste(states[num_chars == i], collapse = ", ")
}
if (i %in% num_chars) {
paste(states[num_chars == i], collapse = ", ")
}
for (i in min:max) {
if (i %in% num_chars) {
paste(states[num_chars == i], collapse = ", ")
}
}
length(char_freq)
char_freq
tmp <- vector("list", length = length(char_freq))
for (i in min:max) {
if (i %in% num_chars) {
tmp[[paste0(i, "-chars")]] <- paste(states[num_chars == i], collapse = ", ")
}
}
tmp
tmp <- vector("list", length = length(char_freq))
for (i in min:max) {
if (i %in% num_chars) {
tmp[paste0(i, "-chars")] <- paste(states[num_chars == i], collapse = ", ")
}
}
tmp
tmp <- vector("list")
for (i in min:max) {
if (i %in% num_chars) {
tmp[paste0(i, "-chars")] <- paste(states[num_chars == i], collapse = ", ")
}
}
tmp
states_list <- vector("list")
for (i in min:max) {
if (i %in% num_chars) {
states_list[paste0(i, "-chars")] <- paste(states[num_chars == i], collapse = ", ")
}
}
states_list
temp_convert <- function(x = 1, to = "celsius") {
switch(to,
"celsius" = to_celsius(tolower(x)),
"kelvin" = to_kelvin(tolower(x)),
"reaumur" = to_reaumur(tolower(x)),
"rankine" = to_rankine(tolower(x)))
}
temp_convert(30, 'celsius')
to_celsius <- function(x = 1) {
(x - 32) * (5/9)
}
to_kelvin <- function(x = 1) {
(x + 459.67) * (5/9)
}
to_reaumur <- function(x = 1) {
(x - 32) * (4/9)
}
to_rankine <- function(x = 1) {
x + 459.67
}
temp_convert <- function(x = 1, to = "celsius") {
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'celsius')
temp_convert <- function(x = 1, to = "celsius") {
switch(to,
"celsius" = to_celsius(tolower(x)),
"kelvin" = to_kelvin(tolower(x)),
"reaumur" = to_reaumur(tolower(x)),
"rankine" = to_rankine(tolower(x)))
}
temp_convert(30, 'celsius')
temp_convert(30, 'Celsius')
temp_convert(30, 'CELSIUS')
temp_convert(30, 'celsius')
temp_convert <- function(x = 1, to = "celsius") {
switch(tolower(to),
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'celsius')
temp_convert(30, 'Celsius')
temp_convert(30, 'CELSIUS')
#for loop with paste0
names <- vector(length = 10)
names
names[i] <- paste0("file", i)
for (i in 1:10) {
names[i] <- paste0("file", i)
}
names
#for loop with paste0
names <- vector()
for (i in 1:10) {
names[i] <- paste0("file", i)
}
names
#paste
paste("file", 1:10)
#paste
paste("file", 1:10, sep="")
file <- rep("file", 10)
paste(file, 1:10)
paste(file, 1:10, sep="")
paste(substr(names, 1, 4))
paste(substr_right(names, 1))
substr_right[1:9](names, 1)
substr_right(names[1:9], 1)
substr_right(names[1:9], 1) + substr_right(names[10], 2)
vec <- substr_right(names[1:9], 1)
vec[10] <- substr_right(names[10], 2)
paste("dataset", vec)
paste("dataset", vec, sep="")
names[i] <- paste0("file", i, ".csv")
for (i in 1:10) {
names[i] <- paste0("file", i, ".csv")
}
names
#paste with 2 inputs, one as string, one as vector
paste("file", 1:10, ".csv", sep="")
#paste with 2 inputs, one as string, one as vector
paste("file", 1:10, ".csv", sep="")
#paste with 3 inputs, all as vectors
file <- rep("file", 10)
csv <- rep(".csv", 10)
paste(file, 1:10, csv, sep="")
vec <- substr_right(names[1:9], 5)
vec[10] <- substr_right(names[10], 6)
paste("dataset", vec, sep="")
runif(1)
runif(10)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm()
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
shiny::runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
no_contrib <- vector(length = input$years)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Saving/Investment Scenarios"),
fluidRow(
column(4,
sliderInput("initial", label = h3("Initial Amount"), min = 0,
max = 100000, value = 1000, pre = "$", step = 500)
),
column(4,
sliderInput("return_rate", label = h3("Return Rate (in %)"), min = 0,
max = 20, value = 5, step = 0.1)
),
column(4,
sliderInput("years", label = h3("Years"), min = 0,
max = 50, value = 20, step = 1)
)
),
fluidRow(
column(4,
sliderInput("annual_contrib", label = h3("Annual Contribution"), min = 0,
max = 50000, value = 2000, pre = "$", step = 500)
),
column(4,
sliderInput("growth_rate", label = h3("Growth Rate (in %)"), min = 0,
max = 20, value = 2, step = 0.1)
),
column(4,
selectInput("facet", label = h3("Facet"),
choices = list("No" = 1, "Yes" = 2),
selected = 1)
)
),
fluidRow(plotOutput("timeline"))
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$timeline <- renderPlot({
no_contrib <- vector(length = input$years)
fixed_contrib <- vector(length = input$years)
growing_contrib <- vector(length = input$years)
no_contrib[1] <- input$initial
fixed_contrib[1] <- input$initial
growing_contrib[1] <- input$initial
for (i in 2:(input$years+1)) {
no_contrib[i] <- future_value(input$initial, input$return_rate, i-1)
fixed_contrib[i] <- no_contrib[i] + annuity(input$contrib, input$return_rate, i-1)
growing_contrib[i] <- no_contrib[i] + growing_annuity(input$contrib, input$return_rate, input$growth_rate, i-1)
}
modalities <- data.frame(year=0:input$years, no_contrib=no_contrib, fixed_contrib=fixed_contrib, growing_contrib=growing_contrib)
ggplot() +
geom_line(data = modalities, aes(x = year, y = no_contrib, color = "no")) +
geom_line(data = modalities, aes(x = year, y = fixed_contrib, color = "fixed")) +
geom_line(data = modalities, aes(x = year, y = growing_contrib, color = "growing")) +
ggtitle("Savings using different investment methods") +
xlab("Years") +
ylab("Balance (in dollars)") +
theme_minimal() +
scale_colour_manual(name = 'Modality',
guide = 'legend',
values = c('no' = 'red',
'fixed' = 'blue',
'growing' = 'green'),
labels = c('no' = "No Contribution",
'fixed' = "Fixed Contribution",
'growing' = "Growing Contribution"),
breaks = c("no", "fixed", "growing")) +
scale_x_continuous(breaks=1:input$years)
})
}
# Run the application
shinyApp(ui = ui, server = server)
#' @title future_value
#' @description returns the computed future value of an investment
#' @param amount initial investment amount
#' @param rate annual return rate
#' @param years how many years
#' @return computed future value
future_value <- function(amount, rate, years) {
return (amount*((1+rate)^years))
}
#' @title annuity
#' @description returns the computed future value of annuity
#' @param contrib how much money contributed each year
#' @param rate annual return rate
#' @param years how many years
#' @return computed future value of annuity
annuity <- function(contrib, rate, years) {
return(contrib*((((1+rate)^years)-1)/rate))
}
#' @title growing_annuity
#' @description returns the computed future value of growing annuity
#' @param contrib how much money contributed each year
#' @param rate annual return rate
#' @param growth growth rate
#' @param years how many years
#' @return computed future value of growing annuity
growing_annuity <- function(contrib, rate, growth, years) {
return (contrib*((((1+rate)^years)-((1+growth)^years))/(rate-growth)))
}
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Saving/Investment Scenarios"),
fluidRow(
column(4,
sliderInput("initial", label = h3("Initial Amount"), min = 0,
max = 100000, value = 1000, pre = "$", step = 500)
),
column(4,
sliderInput("return_rate", label = h3("Return Rate (in %)"), min = 0,
max = 20, value = 5, step = 0.1)
),
column(4,
sliderInput("years", label = h3("Years"), min = 0,
max = 50, value = 20, step = 1)
)
),
fluidRow(
column(4,
sliderInput("annual_contrib", label = h3("Annual Contribution"), min = 0,
max = 50000, value = 2000, pre = "$", step = 500)
),
column(4,
sliderInput("growth_rate", label = h3("Growth Rate (in %)"), min = 0,
max = 20, value = 2, step = 0.1)
),
column(4,
selectInput("facet", label = h3("Facet"),
choices = list("No" = 1, "Yes" = 2),
selected = 1)
)
),
fluidRow(plotOutput("timeline"))
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$timeline <- renderPlot({
no_contrib <- vector(length = input$years)
fixed_contrib <- vector(length = input$years)
growing_contrib <- vector(length = input$years)
no_contrib[1] <- input$initial
fixed_contrib[1] <- input$initial
growing_contrib[1] <- input$initial
for (i in 2:(input$years+1)) {
no_contrib[i] <- future_value(input$initial, input$return_rate, i-1)
fixed_contrib[i] <- no_contrib[i] + annuity(input$contrib, input$return_rate, i-1)
growing_contrib[i] <- no_contrib[i] + growing_annuity(input$contrib, input$return_rate, input$growth_rate, i-1)
}
modalities <- data.frame(year=0:input$years, no_contrib=no_contrib, fixed_contrib=fixed_contrib, growing_contrib=growing_contrib)
ggplot() +
geom_line(data = modalities, aes(x = year, y = no_contrib, color = "no")) +
geom_line(data = modalities, aes(x = year, y = fixed_contrib, color = "fixed")) +
geom_line(data = modalities, aes(x = year, y = growing_contrib, color = "growing")) +
ggtitle("Savings using different investment methods") +
xlab("Years") +
ylab("Balance (in dollars)") +
theme_minimal() +
scale_colour_manual(name = 'Modality',
guide = 'legend',
values = c('no' = 'red',
'fixed' = 'blue',
'growing' = 'green'),
labels = c('no' = "No Contribution",
'fixed' = "Fixed Contribution",
'growing' = "Growing Contribution"),
breaks = c("no", "fixed", "growing")) +
scale_x_continuous(breaks=1:input$years)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
return (amount*((1+rate)^years))
#' @title future_value
#' @description returns the computed future value of an investment
#' @param amount initial investment amount
#' @param rate annual return rate
#' @param years how many years
#' @return computed future value
future_value <- function(amount, rate, years) {
return (amount*((1+rate)^years))
}
#' @title annuity
#' @description returns the computed future value of annuity
#' @param contrib how much money contributed each year
#' @param rate annual return rate
#' @param years how many years
#' @return computed future value of annuity
annuity <- function(contrib, rate, years) {
return(contrib*((((1+rate)^years)-1)/rate))
}
#' @title growing_annuity
#' @description returns the computed future value of growing annuity
#' @param contrib how much money contributed each year
#' @param rate annual return rate
#' @param growth growth rate
#' @param years how many years
#' @return computed future value of growing annuity
growing_annuity <- function(contrib, rate, growth, years) {
return (contrib*((((1+rate)^years)-((1+growth)^years))/(rate-growth)))
}
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Saving/Investment Scenarios"),
fluidRow(
column(4,
sliderInput("initial", label = h3("Initial Amount"), min = 0,
max = 100000, value = 1000, pre = "$", step = 500)
),
column(4,
sliderInput("return_rate", label = h3("Return Rate (in %)"), min = 0,
max = 20, value = 5, step = 0.1)
),
column(4,
sliderInput("years", label = h3("Years"), min = 0,
max = 50, value = 20, step = 1)
)
),
fluidRow(
column(4,
sliderInput("annual_contrib", label = h3("Annual Contribution"), min = 0,
max = 50000, value = 2000, pre = "$", step = 500)
),
column(4,
sliderInput("growth_rate", label = h3("Growth Rate (in %)"), min = 0,
max = 20, value = 2, step = 0.1)
),
column(4,
selectInput("facet", label = h3("Facet"),
choices = list("No" = 1, "Yes" = 2),
selected = 1)
)
),
fluidRow(plotOutput("timeline"))
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$timeline <- renderPlot({
no_contrib <- vector(length = input$years)
fixed_contrib <- vector(length = input$years)
growing_contrib <- vector(length = input$years)
no_contrib[1] <- input$initial
fixed_contrib[1] <- input$initial
growing_contrib[1] <- input$initial
for (i in 2:(input$years+1)) {
no_contrib[i] <- future_value(input$initial, input$return_rate, i-1)
fixed_contrib[i] <- no_contrib[i] + annuity(input$annual_contrib, input$return_rate, i-1)
growing_contrib[i] <- no_contrib[i] + growing_annuity(input$annual_contrib, input$return_rate, input$growth_rate, i-1)
}
modalities <- data.frame(year=0:input$years, no_contrib=no_contrib, fixed_contrib=fixed_contrib, growing_contrib=growing_contrib)
ggplot() +
geom_line(data = modalities, aes(x = year, y = no_contrib, color = "no")) +
geom_line(data = modalities, aes(x = year, y = fixed_contrib, color = "fixed")) +
geom_line(data = modalities, aes(x = year, y = growing_contrib, color = "growing")) +
ggtitle("Savings using different investment methods") +
xlab("Years") +
ylab("Balance (in dollars)") +
theme_minimal() +
scale_colour_manual(name = 'Modality',
guide = 'legend',
values = c('no' = 'red',
'fixed' = 'blue',
'growing' = 'green'),
labels = c('no' = "No Contribution",
'fixed' = "Fixed Contribution",
'growing' = "Growing Contribution"),
breaks = c("no", "fixed", "growing")) +
scale_x_continuous(breaks=1:input$years)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
runApp('workout06-aditya-yadav')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='adityayadav', token='BCD84BF6C2D31A82A7C169AEF0D3ADBB', secret='m2xwiDl1FMaZnUiAyi/8TuukYTTXIeO+V6+VWMU3')
library(rsconnect)
rsconnect::deployApp('workout06-aditya-yadav/app.R')
rsconnect::deployApp('app.R')
rsconnect::deployApp('app')
rsconnect::deployApp('workout06-aditya-yadav/app')
rsconnect::deployApp('workout06-aditya-yadav/app')
rsconnect::deployApp('workout06-aditya-yadav/app.R')
rsconnect::deployApp('workout06-aditya-yadav/app')
getwd()
shiny::runApp('workout02-aditya-yadav')
rsconnect::deployApp('/Users/adityayadav/desktop/stat 133/workout02-aditya-yadav/app')
deployapp()
deployApp()
library(rsconnect)
deployApp()
ls
gwtwd()
pwd()
pwd
getwd()
deployApp("workout02-aditya-yadav/app")
runApp('workout02-aditya-yadav')
